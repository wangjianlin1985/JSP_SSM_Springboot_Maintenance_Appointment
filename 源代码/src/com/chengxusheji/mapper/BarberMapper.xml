<!DOCTYPE mapper  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!--namespace命名空间，为了对sql语句进行隔离，方便管理，mapper开发dao方式，使用namespace有特殊作用  
mapper代理开发时将namespace指定为mapper接口的全限定名  
 -->
<mapper namespace="com.chengxusheji.mapper.BarberMapper"> 
<!--在mapper.xml文件中配置很多的sql语句，执行每个sql语句时，封装为MappedStatement对象 
mapper.xml以statement为单位管理sql语句  
 -->
	<!-- 添加维修人员记录 -->
	<insert id="addBarber" parameterType="barber">
		insert into t_barber(name,gender,barberAge,barberPhoto,workYears,barberDesc,barberMemo) values 
		(#{name},#{gender},#{barberAge},#{barberPhoto},#{workYears},#{barberDesc},#{barberMemo})
	</insert>

	<!-- 按照查询条件分页查询维修人员记录 -->
	<select id="queryBarber" resultMap="barberMap" >
		select t_barber.* from t_barber ${where} limit #{startIndex},#{pageSize}
	</select>
	<resultMap id="barberMap" type="barber">
        <id property="barberId" column="barberId" />
    </resultMap>

    <!-- 按照查询条件查询所有维修人员记录 -->
	<select id="queryBarberList" resultMap="barberMap" >
		select t_barber.* from t_barber ${where}
	</select>

    <!-- 按照查询条件的维修人员记录数 -->
	<select id="queryBarberCount" resultType="int">
		select count(*) from t_barber ${where}
	</select>

	<!-- 根据主键查询某个维修人员记录 -->
	<select id="getBarber" parameterType="int" resultMap="barberMap">
		select * from t_barber where t_barber.barberId = #{barberId}
	</select>

	<!-- 更新维修人员记录 -->
	<update id="updateBarber" parameterType="barber">
		update t_barber set name=#{name},gender=#{gender},barberAge=#{barberAge},barberPhoto=#{barberPhoto},workYears=#{workYears},barberDesc=#{barberDesc},barberMemo=#{barberMemo} where barberId = #{barberId}
	</update>

	<!-- 删除维修人员记录 -->
	<delete id="deleteBarber" parameterType="int">
		delete from t_barber where barberId=#{barberId}
	</delete>

</mapper>
